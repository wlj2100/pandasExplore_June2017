import pandas as pd
import numpy as np

def gender(val):
    m = 0
    f = 0
    if val == 'M':
        m = 1
    elif val == 'F':
        f = 1
    return m, f

# df.FND_AM_BIN.unique()
# array([13,  5, 11,  7,  1,  0,  6,  3, 12,  2, 14,  9,  4, 10,  8])
def getResult(val, labelList):
    temp = []
    for label in labelList:
        if str(val) == str(label):
            temp.append(1)
        else:
            temp.append(0)
    return tuple(temp)

def fnd(val):
    labelList = [13,  5, 11,  7,  1,  0,  6,  3, 12,  2, 14,  9,  4, 10,  8]
    return getResult(val, labelList)

def apr(val):
    labelList = [4, 1, 7, 6, 3, 0, 5, 8, 2]
    return getResult(val, labelList)

def age(val):
    labelList = [5, 1, 0, 2, 4, 3]
    return getResult(val, labelList)

def make(val):
    labelList = ['JEEP', 'DODGE', 'RAM', 'CHRYSLER', 'SUBARU', 'FORD', 'THIS IS',
       'CHEVROLET', 'MITSUBISHI', 'PONTIAC', 'OLDSMOBILE', 'BUICK',
       'CADILLAC', 'SATURN', 'GMC', 'ISUZU', 'HARLEY', 'HONDA', 'LINCOLN',
       'MERCURY', 'NISSAN', 'TOYOTA', 'VOLKSWAGEN', 'MAZDA', 'ACURA',
       'SUZUKI', 'LEXUS', 'FIAT', 'KIA', 'SCION', 'MERCEDES', 'BMW',
       'HUMMER', 'INFINITI', 'HYUNDAI', 'VOLVO', 'JAGUAR', 'LAND ROVER',
       'LOTUS', 'AUDI', 'SMART', 'MINI', 'PORSCHE', 'SAAB', 'MASERATI',
       'GAP', 'ALFA ROMEO', 'GENESIS']
    return getResult(val, labelList)

def year(val):
    labelList = [14, 15, 16, 17, 12, 13,  4,  8,  7,  9,  6,  5,  3, 10, 11,  2, 20,
       90, 98,  0,  1, 99, 97, 95, 93, 89, 96, 94, 91, 92]
    return getResult(val, labelList)

def pl(val):
    labelList = ['P', 'L']
    return getResult(val, labelList)

def loanTerm(val):
    labelList = [72, 75, 84, 36, 39, 60, 63, 66, 48, 42, 78, 24, 54,  0, 76, 71, 58,
       77, 80, 68, 87, 47, 65, 40, 96, 69, 74, 49, 27, 90, 70, 52, 79, 30,
       46, 44, 73, 51, 64, 61, 12, 81, 53, 59, 62, 82, 88, 55, 50, 57, 45,
       56, 15, 41, 35, 67, 85, 34, 22, 33, 18, 83, 38, 29, 37, 43, 91, 26,
       19, 25, 16, 32, 20, 28, 86, 31, 14, 23, 13, 17]
    return getResult(val, labelList)

def dlrZip(val):
    labelList = ['212', '88', '80', '74', '79', '156', '530', '581', '564', '27',
       '78', '606', '20', '322', '800', '201', '77', '194', '177', '104',
       '801', '223', '207', '234', '145', '187', '76', '42', '440', '441',
       '161', '914', '434', '442', '134', '211', '220', '525', '531',
       '443', '292', '837', '751', '349', '805', '18', '270', '752', '601',
       '604', '87', '83', '229', '727', '535', '600', '308', '456', '152',
       '113', '809', '296', '210', '31', '40', '299', '871', '967', '939',
       '400', '46', '151', '30', '334', '38', '836', '640', '290', '26',
       '186', '208', '127', '977', '217', '812', '294', '346', '376',
       '920', '280', '940', '320', '342', '328', '191', '615', '209', '15',
       '336', '452', '918', '170', '309', '222', '874', '19', '585', '807',
       '337', '261', '352', '160', '231', '945', '236', '486', '285',
       '301', '891', '921', '351', '339', '333', '330', '900', '283',
       '326', '331', '786', '377', '338', '354', '233', '890', '797',
       '327', '750', '359', '335', '778', '293', '11', '324', '380', '775',
       '880', '855', '833', '284', '323', '972', '273', '298', '883',
       '776', '381', '852', '325', '317', '982', '278', '759', '319',
       '272', '341', '532', '652', '305', '392', '658', '300', '773',
       '534', '291', '302', '720', '917', '787', '721', '853', '722',
       '974', '365', '925', '378', '218', '314', '144', '424', '919',
       '806', '362', '366', '370', '344', '973', '277', '840', '968',
       '329', '393', '913', '315', '356', '557', '405', '765', '617',
       '306', '971', '605', '279', '21', '844', '386', '770', '245', '347',
       '396', '398', '850', '473', '799', '774', '310', '591', '9', '729',
       '150', '281', '577', '481', '448', '23', '276', '484', '445', '221',
       '303', '235', '631', '926', '70', '189', '253', '190', '255', '662',
       '154', '10', '432', '457', '251', '193', '680', '524', '28', '286',
       '33', '597', '262', '575', '142', '430', '361', '545', '126', '560',
       '894', '802', '537', '904', '390', '902', '700', '851', '321',
       '704', '297', '630', '355', '618', '911', '782', '875', '206',
       '616', '761', '841', '402', '288', '583', '109', '214', '975',
       '265', '140', '859', '57', '970', '922', '282', '108', '435', '582',
       '379', '171', '105', '762', '168', '425', '24', '155', '175', '436',
       '403', '232', '784', '82', '275', '843', '363', '312', '502', '653',
       '195', '981', '307', '905', '928', '708', '993', '274', '980',
       '455', '180', '41', '908', '598', '681', '85', '165', '404', '454',
       '358', '863', '111', '7', '350', '86', '240', '446', '633', '406',
       '785', '711', '174', '931', '077', '031', '087', '088', '010',
       '027', '080', '018', '040', '007', '015', '070', '042', '313',
       '026', '030', '023', '009', '038', '076', '046', '086', '011',
       '020', '078', '074', '024', '033', '079', '877', '021', '946',
       '082', '258', '483', '057', '176', '083', '660', '019', '029',
       '067', '743', '951', '498', '372', '492', '943', '257', '824',
       '953', '028', '641', '122', '041', '458', '693', '910', '085',
       '391', '107', '599', '431', '17', '37', '384', '037', '017', '468',
       '810', '68', '67', '6', '271', '068', '006', '551', '125', '941',
       '29']
    return getResult(val, labelList)

def custZip(val):
    labelList = [212,  79,  80,  78,  74,  70, 152, 530, 565, 581, 564,  27, 606,
        20, 322, 800, 802, 201, 254,  77, 194, 168, 104, 207, 211,  88,
       200, 234, 144, 184,  76,  21, 217,  42, 151,  29,  82, 440, 441,
       161, 187, 190, 196, 900, 434, 442, 145, 150, 134,  40, 163, 156,
       220, 525, 443, 292, 148, 837, 801, 752, 349, 186, 805, 531, 241,
       103, 177, 100, 765, 601, 604,  83, 553,  87, 230, 727, 223, 270,
       210, 222, 182, 125, 295, 436, 224, 600, 296,  71,  73, 456, 112,
       810,  86,  30,  41, 219, 299, 133, 871, 107, 188, 463, 967, 193,
       451, 109, 939,  49, 610,  25, 580, 183,  28, 402, 852,  46, 293,
        75, 444, 160,  32, 334,  38, 255, 191, 326, 836, 127, 532, 105,
        85, 806, 110,  24, 640,  26, 563, 208, 977, 157, 809,  81, 812,
       653, 584,  23,  44, 336, 294, 346, 583, 218, 582,  31, 229, 243,
       603, 242, 920, 206, 281, 940, 433, 147, 236, 113, 130, 320, 342,
       328, 394, 616,  14, 452, 607, 271, 917, 170, 535, 221, 308, 226,
       647, 874, 615,  19,  17, 757,  43, 586, 298, 431, 121, 807,  15,
       337, 185, 262,  18, 351, 231, 945, 174, 486, 272, 347, 301, 890,
       921, 355, 751, 339, 330, 331, 902, 273, 787, 333, 379, 354, 750,
       891, 794, 291, 327, 359, 381, 797, 778, 290, 309, 335,  10, 324,
       386, 775, 880, 303, 257, 338, 855, 950, 283, 284, 323, 970, 986,
       605, 883, 761, 833, 777, 760, 799, 341, 446, 325, 306, 982, 285,
       278, 352, 759, 319, 949, 199, 652, 397, 313, 305, 390, 657, 766,
       300, 380, 304, 392, 925, 916, 758,  64, 776, 720, 926, 878, 282,
       722, 391, 853, 721, 974, 762, 365, 973, 919, 754, 316, 928, 906,
       879, 344, 608, 321, 770, 235, 317, 329, 972, 280, 378, 850, 288,
       246, 314, 423, 700, 923, 958, 362, 658, 712, 366, 951, 370, 373,
       864, 209, 275, 840, 462, 773, 913, 233, 898, 393, 302, 371, 914,
       424, 274,  11, 315, 786, 245, 197, 384, 704,  45, 566, 405, 903,
       539, 108, 726, 214, 985, 570, 617, 971, 798, 479,  39, 851, 908,
       279, 240, 376, 944, 907, 803, 843, 473, 609, 795, 310, 779, 464,
       350, 225, 497, 227, 863, 396, 401, 237, 403, 495, 723, 713, 410,
       398, 948, 477, 534, 480, 460, 870, 956, 796, 307, 856, 912, 935,
       611, 959, 844, 162, 173, 954, 882, 356, 774, 680, 946, 590,  34,
       769,  48,   9, 918, 297, 729, 276, 372, 164, 741, 968, 502, 957,
       287, 656, 238, 286, 932, 875, 784, 577, 239, 481,  60, 487, 385,
       448, 435, 277, 400, 941, 915, 930, 924, 537, 740, 631, 496, 106,
       650, 389, 911, 630, 114, 154, 979,  13, 804, 189, 743, 654, 153,
       175, 216, 252, 661, 180, 811, 247, 476, 412, 557, 253, 377, 195,
       131, 261, 171, 250, 128, 169, 681, 873, 832, 522, 597, 266, 264,
       575, 711, 457, 612, 140, 430, 357, 179, 501, 591, 499, 142,  72,
       542, 545, 822, 439, 492, 263, 548, 808, 445, 560, 453, 559, 484,
       592, 465,  54,  89, 447, 260, 432, 115, 894, 215, 820, 816, 146,
       461, 785, 249, 244, 135, 526, 562, 554, 483, 490, 910, 602, 934,
       952, 927, 360, 953, 764, 936,  37, 768, 411, 937, 361, 678, 648,
       395, 383, 724, 387, 922, 790, 904, 701, 406, 706, 996, 933, 472,
       126, 469, 404, 232, 993, 860, 905, 454, 198, 983,  84, 259,  16,
       728, 826, 618, 178, 829, 248, 228, 622, 449, 633,  47, 813, 975,
        66, 598, 265, 124, 859, 585, 780,  57,  68, 846,  63, 514, 172,
        50, 660, 587, 781, 931, 117, 877, 176, 251, 475, 847, 693, 980,
       670, 155, 960, 567, 834, 159, 506, 111, 368,  62, 149, 549, 358,
       458, 408, 841, 500, 409, 547, 824, 571, 425, 550, 635, 122, 551,
       544, 827, 485, 120, 541, 574, 989,  51, 413, 158, 995,  12,  52,
       831, 494, 978, 119, 788, 748, 363, 756, 364, 655, 865, 561, 523,
       165, 572, 667, 677, 881, 835, 123, 893, 267, 437, 576, 101, 636,
       488, 588, 420, 782, 129, 166, 593, 613, 767, 792, 783, 388, 705,
       708, 312, 710, 141, 685, 828, 137, 815, 455, 641,  22, 665, 318,
       138, 417, 139, 596, 943, 482, 845, 450,  65, 558, 691, 515, 493,
       997, 543, 599, 289, 662, 258, 527, 467, 744, 707, 268, 719, 367,
       714, 620, 438, 498, 725,  35, 984, 884, 421, 747, 755, 763, 645,
       672, 737, 382, 623, 814, 823, 503,   7, 731, 716, 426, 644, 838,
       524, 690, 471, 703, 546, 508, 418, 791, 749,  33, 646, 745, 594,
       415, 683, 675, 639, 895, 830, 427, 407, 629, 668, 628, 466, 857,
       167, 505, 474,  67, 976, 981, 988, 718, 143, 955, 990, 717, 181,
       374, 478,  59, 651, 468, 897, 614, 625, 513, 132,  36, 991,  58,
       793, 504, 999, 789, 516, 634,  56, 528,  69, 739, 688, 202, 521,
       992, 136, 735, 489, 666, 961,  53, 573, 507,  61, 422, 102, 510,
       637, 256, 520, 994, 491, 369, 825, 540, 627, 595, 470, 538, 626,
       638, 730, 624, 664, 674, 414, 687, 116, 556, 512, 676, 692, 689,
       416, 738, 511, 734, 203, 772, 686, 684, 669, 947, 205, 619, 118,
       998, 332, 753, 673,   6, 679, 746, 671, 311, 942, 204, 842]
    return getResult(val, labelList)
# Index([u'Unnamed: 0', u'VIN', u'EWT', u'SRV', u'MNT', u'TLP', u'RHT', u'PNTP',
#        u'ETCH', u'DENT', u'FND_AM', u'APR', u'AGE', u'GENDER', u'ZIP', u'MAKE',
#        u'MODEL', u'YEAR', u'MILAGE', u'PURCHASE_LEASE', u'LOAN_TERM',
#        u'DLR_ZIP3', u'CUST_ZIP3', u'FND_AM_BIN', u'APR_BIN', u'AGE_BIN'],
#       dtype='object')

if __name__ == '__main__':
    # read origin csvs
    df = pd.read_csv('poc_ml_data_v3_.csv')
    # remove null in DLR_ZIP3
    # df[['DLR_ZIP3']] = df[['DLR_ZIP3']].apply(pd.to_numeric)
    df[['DLR_ZIP3']] = df[['DLR_ZIP3']].astype(str)
    df = df[df.DLR_ZIP3 != '(nu']
    # generate new DataFrame with keep feature
    newDf = df[['VIN', 'EWT', 'SRV', 'MNT', 'TLP', 'RHT', 'PNTP', 'ETCH', 'DENT']]

    # for GENDER
    print len(df.GENDER.unique())
    newDf['MALE'], newDf['FEMALE'] = zip(*df['GENDER'].map(gender))
    # for FND_AM_BIN
    print len(df.FND_AM_BIN.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['FND_AM_BIN'].map(fnd))).T, columns = ['FND_AM_BIN_' + str(val) for val in df.FND_AM_BIN.unique()])
    newDf[tempDf.columns] = tempDf
    # for APR_BIN
    print len(df.APR_BIN.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['APR_BIN'].map(apr))).T, columns = ['APR_BIN_' + str(val) for val in df.APR_BIN.unique()])
    newDf[tempDf.columns] = tempDf
    # for AGE_BIN
    print len(df.AGE_BIN.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['AGE_BIN'].map(age))).T, columns = ['AGE_BIN_' + str(val) for val in df.AGE_BIN.unique()])
    newDf[tempDf.columns] = tempDf
    # for MAKE
    print len(df.MAKE.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['MAKE'].map(make))).T, columns = ['MAKE_' + str(val) for val in df.MAKE.unique()])
    newDf[tempDf.columns] = tempDf
    # for YEAR
    print len(df.YEAR.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['YEAR'].map(year))).T, columns = ['YEAR_' + str(val) for val in df.YEAR.unique()])
    newDf[tempDf.columns] = tempDf
    # for PURCHASE_LEASE
    print len(df.PURCHASE_LEASE.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['PURCHASE_LEASE'].map(pl))).T, columns = ['PURCHASE_LEASE_' + str(val) for val in df.PURCHASE_LEASE.unique()])
    newDf[tempDf.columns] = tempDf
    # for LOAN_TERM
    print len(df.LOAN_TERM.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['LOAN_TERM'].map(loanTerm))).T, columns = ['LOAN_TERM_' + str(val) for val in df.LOAN_TERM.unique()])
    newDf[tempDf.columns] = tempDf
    # for DLR_ZIP3
    print len(df.DLR_ZIP3.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['DLR_ZIP3'].map(dlrZip))).T, columns = ['DLR_ZIP3_' + str(val) for val in df.DLR_ZIP3.unique()])
    newDf[tempDf.columns] = tempDf
    # for CUST_ZIP3
    print len(df.CUST_ZIP3.unique())
    tempDf = pd.DataFrame(data = np.array(zip(*df['CUST_ZIP3'].map(custZip))).T, columns = ['CUST_ZIP3_' + str(val) for val in df.CUST_ZIP3.unique()])
    newDf[tempDf.columns] = tempDf

    # ignore
    # for model
    print len(df.MODEL.unique())


    newDf.to_csv('output.csv')
    len(newDf.columns)
    newDf.describe()
